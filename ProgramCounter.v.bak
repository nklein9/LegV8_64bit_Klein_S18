module ProgramCounter (in, PC, PC4, clock, reset, PS);
input [63:0] in;
input [1:0] PS;
input clock, reset;
output [63:0] PC, PC4;

wire [63:0] in_muxoutput, Add2Output, PCRegInput, MuxtoAdder;
wire Cout1, Cout2, Cin1, Cin2;
wire load;

//Adder section of Program Counter

Adder add1 (PC4, Cout1, PC, 64'b0000000000000000000000000000000000000000000000000000000000000100, Cin1);
Adder add2 (Add2Output, Cout2, PC4, in_muxoutput, Cin2);

//Mux section 

assign MuxtoAdder = PS[0] ? in [61:0] : 2'b00;
assign PCRegInput = PS[1] ? PC4 : MuxtoAdder;

//Load enable
assign load = PS[0] + PS[1];

RegisterNbit register (PC, PCRegInput, load, reset, clock);


// ADDER SEGMENT // 
module Adder (F,Cout,A,B,Cin);
input[63:0] A,B;
input Cin;
output [63:0] F;
output Cout;

assign {Cout, F} = A + B + Cin;

endmodule
